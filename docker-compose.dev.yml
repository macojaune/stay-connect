services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:16-alpine
    container_name: stayconnect_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: stayconnect_dev
      POSTGRES_USER: stayconnect_user
      POSTGRES_PASSWORD: stayconnect_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - stayconnect_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stayconnect_user -d stayconnect_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AdonisJS Development Server
  adonis_dev:
    build:
      context: ./
      dockerfile: Dockerfile.dev
      target: development
    container_name: stayconnect_adonis_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3333
      HOST: 0.0.0.0
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5433
      DB_USER: stayconnect_user
      DB_PASSWORD: stayconnect_password
      DB_DATABASE: stayconnect_dev
      APP_KEY: ${APP_KEY:-your-32-character-secret-key-here}
      SESSION_DRIVER: cookie
    ports:
      - "3333:3333"
      - "9229:9229"  # Node.js debugger port
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stayconnect_dev_network
    volumes:
      - ./:/app
      - ./node_modules:/app/node_modules
      - ./uploads:/app/uploads
    command: npm run dev

  # Database Admin Interface
  adminer:
    image: adminer:4.8.1
    container_name: stayconnect_adminer_dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - stayconnect_dev_network
    depends_on:
      - postgres

  # # Redis for caching and sessions (optional)
  # redis:
  #   image: redis:7-alpine
  #   container_name: stayconnect_redis_dev
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - stayconnect_dev_network
  #   volumes:
  #     - redis_dev_data:/data
  #   command: redis-server --appendonly yes

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  stayconnect_dev_network:
    driver: bridge